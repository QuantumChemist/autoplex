name: Build and Push Docker Image

on:
  workflow_dispatch:
  release:
    types: [ created ] # Runs only when a new release is created

jobs:
  build-image:
    runs-on: ubuntu-latest
    # if: github.repository_owner == 'autoatml' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: lowercase github.repository
      run: |
        echo "IMAGE_NAME=`echo ${{github.repository}} | tr '[:upper:]' '[:lower:]'`" >>${GITHUB_ENV}
    
    - name: Extract version from pyproject.toml
      run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

    # Build Docker image with a custom Python version
    - name: Build Docker image (Python ${{ matrix.python-version }})
      run: |
        docker build \
        --build-arg PYTHON_VERSION=${{ matrix.python-version }} \
        -t ghcr.io/${{ env.IMAGE_NAME }}/autoplex-python-${{ matrix.python-version }}:${{ env.VERSION }} .
   # Push Docker image to GHCR
    - name: Push Docker image to GHCR (Python ${{ matrix.python-version }})
      run: |
        docker push ghcr.io/${{ env.IMAGE_NAME }}/autoplex-python-${{ matrix.python-version }}:${{ env.VERSION }}

  update-devcontainer:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
      with:
        ref: main  # Ensure we start from the latest main branch

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Update devcontainer.json with new version
      run: |
        TAG=$(curl -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/orgs/autoatml/packages/container/autoplex%2Fautoplex-python-3.10/versions \
            | jq -r 'sort_by(.created_at) | reverse | .[0].metadata.container.tags[0]')

        # Debug the version extracted
        echo "Extracted TAG: $TAG"
        
        # Update the version in devcontainer.json
        # Using the escaped version to safely substitute in the JSON file
        sed -i -E "s|ghcr.io/autoatml/autoplex/autoplex-python-3.10:[^\"]*|ghcr.io/autoatml/autoplex/autoplex-python-3.10:$TAG|" .devcontainer/devcontainer.json

        echo "Updated devcontainer.json with version $TAG"


    - name: Set up Git configuration
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "github-actions@github.com"

    - name: Create or update the devcontainer branch
      run: |
        BRANCH_NAME="update-devcontainer"

        # Fetch the latest changes from the origin
        git fetch origin

        # Check if the branch exists
        if git ls-remote --heads origin $BRANCH_NAME | grep -q "refs/heads/$BRANCH_NAME"; then
          # If the branch exists, check it out and rebase with main
          git checkout $BRANCH_NAME
          git rebase origin/main
        else
          # If the branch doesn't exist, create it from main
          git checkout -b $BRANCH_NAME origin/main
        fi

      # Commit only if there are changes
      if git diff --cached --quiet; then
        echo "No changes to commit."
      else
        git commit -m "Update devcontainer.json version tag"
      fi
      
      # Push the changes, setting the upstream branch if it's a new branch
      git push --set-upstream origin $BRANCH_NAME
